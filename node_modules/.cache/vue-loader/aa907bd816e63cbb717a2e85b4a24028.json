{"remainingRequest":"/var/www/html/vue/app/node_modules/vue-loader/lib/index.js??vue-loader-options!/var/www/html/vue/app/src/views/Results.vue?vue&type=style&index=0&lang=css&","dependencies":[{"path":"/var/www/html/vue/app/src/views/Results.vue","mtime":1604523727029},{"path":"/var/www/html/vue/app/node_modules/css-loader/dist/cjs.js","mtime":499162500000},{"path":"/var/www/html/vue/app/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":499162500000},{"path":"/var/www/html/vue/app/node_modules/postcss-loader/src/index.js","mtime":499162500000},{"path":"/var/www/html/vue/app/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/var/www/html/vue/app/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCi5jcml0IHsKICAgIGZvbnQtc2l6ZTogNzUlOwp9Cg=="},{"version":3,"sources":["Results.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAmcA;AACA;AACA","file":"Results.vue","sourceRoot":"src/views","sourcesContent":["<template>\n<section style=\"padding: 4rem 2rem\">\n<h5><a href=\"/\">\n  <i class=\"fa fa-home\"></i> Home</a>&nbsp;<i class=\"fas fa-chevron-right\"></i>&nbsp;\n  <a href=\"#/search\"><i class=\"fa fa-database\"></i> hCoronavirusesDB</a>&nbsp;<i class=\"fas fa-chevron-right\"></i>\n  Found {{viruses ? viruses.length : \"...\"}} results <span v-if=\"search_type=='accession'\">for the accession number {{accession_num}}</span></h5>\n  <div v-if=\"search_type=='custom'\">\n        Search criteria: \n        <span class=\"badge badge-primary\">{{specimen.split(\"_\")[0]}}</span>&nbsp;\n        <span class=\"badge badge-success\">{{sequence_type == \"prot\" ? \"Proteins\" : \"Genes\"}}</span>\n        <span class=\"badge badge-light\">Gene Symbols:</span>&nbsp;<span class=\"crit\">{{gene_symbols ? gene_symbols.join(\", \") : \"(Any)\"}}</span>&nbsp;\n        <span class=\"badge badge-light\">Proteins:</span>&nbsp;<span class=\"crit\">{{proteins ? proteins.join(\", \") : \"(Any)\"}}</span>&nbsp;\n        <span class=\"badge badge-light\">Hosts:</span>&nbsp;<span class=\"crit\">{{hosts ? hosts.join(\", \") : \"(Any)\"}}</span>&nbsp;\n        <span class=\"badge badge-light\">Countries:</span>&nbsp;<span class=\"crit\">{{countries ? countries.join(\", \") : \"(Any)\"}}</span>&nbsp;\n        <span class=\"badge badge-light\">Collection Dates:</span>&nbsp;<span class=\"crit\">{{years ? years.join(\", \") : \"(Any)\"}}</span>\n        </div>\n<br>\n\n<div v-if=\"isLoadingResult\" style=\"text-align: center\">\n    <br />\n    <hollow-dots-spinner\n        :animation-duration=\"1000\"\n        :dot-size=\"20\"\n        :dots-num=\"3\"\n        color=\"#00d961\"\n        style=\"margin-left: auto; margin-right: auto;\"\n    />\n    <br />\n    <span class=\"badge badge-success\">Loading Results...</span>\n</div>\n<div v-if=\"!isLoadingResult\">\n<ul class=\"nav nav-tabs\" id=\"mainTab\" role=\"tablist\">\n  <li class=\"nav-item\">\n    <a class=\"nav-link active\" id=\"home-tab\" data-toggle=\"tab\" href=\"#home\" role=\"tab\" aria-controls=\"home\" aria-selected=\"true\">Results (Table)</a>\n  </li>\n  \n  <li class=\"nav-item\">\n    <a class=\"nav-link\" id=\"hist-tab\" data-toggle=\"tab\" href=\"#hist\" role=\"tab\" aria-controls=\"hist\" aria-selected=\"false\">Collection Date Distribution</a>\n  </li>\n</ul>\n<div class=\"tab-content\" id=\"mainTabContent\">\n  <div class=\"tab-pane fade show active\" id=\"home\" role=\"tabpanel\" aria-labelledby=\"home-tab\">\n    <br>\n    <section>\n    <table id=\"myTable\" class=\"display nowrap table\" style=\"width:100%\">\n        <thead>\n        <tr>\n            <th><input type=\"checkbox\" id=\"selectAllGenes\" /></th>\n            <th>id</th>\n            <th>Gene Product<br> Name</th>\n            <th>Gene<br> Symbol</th>\n            <th>GenBank Genome<br> Accession</th>\n            <th>GenBank Protein<br> Aaccession</th>\n            <th>Strain Name</th>\n            <th>Collection<br> Date</th>\n            <th>Host</th>\n            <th>Country</th>\n            <th>Sequence</th>\n        </tr>\n        </thead>\n        <tbody>\n        <tr v-for=\"virus in viruses\" v-bind:key=\"virus.id\">\n            <td></td>\n            <td>{{ virus.id }}</td>\n            <td>{{ virus.gene_product_name }}</td>\n            <td>{{ virus.gene_symbol }}</td>\n            <td>{{ virus.genbank_genome_accession }}</td>\n            <td>{{ virus.genbank_protein_accession }}</td>\n            <td>{{ virus.strain_name }}</td>\n            <td>{{ virus.collection_date }}</td>\n            <td>{{ virus.host }}</td>\n            <td>{{ virus.country }}</td>\n            <td>{{ virus.fasta }}</td>\n        </tr>\n        </tbody>\n    </table>\n    <br>\n    <br>\n\n    <button @click=\"configureMview()\" type=\"button\" class=\"btn btn-primary\">\n      <i class=\"fas fa-align-center\"></i> Multiple Sequence Alignment (ClustalOmega)\n    </button>\n    &nbsp;\n    <button  @click=\"downloadSelected()\" id=\"download\" type=\"button\" class=\"btn btn-primary\">\n      <i class=\"fa fa-download\"></i> Download Selected Genes</button>\n   </section>\n   &nbsp;\n\n   \n\n  <!-- Modal -->\n  <div class=\"modal fade\" id=\"modalConfig\" tabindex=\"-1\" role=\"dialog\" aria-labelledby=\"exampleModalCenterTitle\" aria-hidden=\"true\">\n    <div class=\"modal-dialog modal-dialog-centered\" role=\"document\">\n      <div class=\"modal-content\">\n        <div class=\"modal-header\">\n          <h5 class=\"modal-title\" id=\"exampleModalLongTitle\">Configure ClustalOmega Sequence Alignment</h5>\n          <button type=\"button\" class=\"close\" data-dismiss=\"modal\" aria-label=\"Close\">\n            <span aria-hidden=\"true\">&times;</span>\n          </button>\n        </div>\n        <div class=\"modal-body\">\n          <input id=\"chkConsensus\" type=\"checkbox\" v-model=\"mview_consensus\" />&nbsp;<label for=\"chkConsensus\">Show Consensus</label>\n          <div>Select the reference sequence:</div>\n          <div v-for=\"r in selectedRows\" v-bind:key=\"r.id\">\n            <input type=\"radio\" v-bind:value=\"r.id\" name=\"referenceForMview\"> {{r.title}}\n          </div>\n        </div>\n        <div class=\"modal-footer\">\n          <button type=\"button\" class=\"btn btn-secondary\" data-dismiss=\"modal\">Close</button>\n          <button type=\"button\" @click=\"msaMuscleLink('mview')\" class=\"btn btn-primary\" data-dismiss=\"modal\">Run Alignment</button>\n        </div>\n      </div>\n    </div>\n  </div>\n\n  </div>\n  <div class=\"tab-pane fade\" id=\"map\" role=\"tabpanel\" aria-labelledby=\"map-tab\" style=\"width:100%\">\n    <br>\n    <div v-if=\"chartTableData\" class=\"row\">\n        <div class=\"col-xs-12 col-sm-12 col-lg-9\">\n        <GChart ref=\"gchartMap\" v-if=\"chartData\" :resizeDebounce=\"500\" type=\"GeoChart\" :data=\"chartData\" :options=\"chartOptions\" :settings=\"{packages: ['corechart', 'table'], mapsApiKey:'AIzaSyCqaPSmctfwgNKG5GE2DN3JMMGYDFItgQQ'}\"/>\n        </div>\n        <div class=\"col-xs-12 col-sm-12 col-lg-3\">\n            <table class=\"table table-sm\" id=\"seqTable\">\n                <thead>\n                    <tr>\n                    <th>Country</th>\n                    <th>Sequence Count</th>\n                    </tr>\n                </thead>\n                <tbody>\n                    <tr v-for=\"(val, key) in chartTableData\" v-bind:key=\"key\" :class=\"{'table-secondary':(key == 'Unknown')}\">\n                        <td>{{key}} ({{country_codes[key]}})</td>\n                        <td>{{val}}</td>\n                    </tr>\n                </tbody>\n            </table>\n        </div>\n    </div>\n  </div>\n  <div class=\"tab-pane fade\" id=\"hist\" role=\"tabpanel\" aria-labelledby=\"hist-tab\" style=\"width:100%\">\n    <br>\n    <div v-if=\"yearData\" class=\"row\">\n        <div class=\"col-xs-12 col-sm-12 col-lg-9\">\n        <GChart ref=\"gchartHist\" v-if=\"yearData\" type=\"ColumnChart\" :data=\"yearData\" :options=\"chartOptions\" :settings=\"{packages: ['corechart']}\"/>\n        </div>\n        <div class=\"col-xs-12 col-sm-12 col-lg-3\">\n            <table class=\"table table-sm\" id=\"yearTable\">\n                <thead>\n                    <tr>\n                    <th>Year</th>\n                    <th>Sequence Count</th>\n                    </tr>\n                </thead>\n                <tbody>\n                    <tr v-for=\"data in yearData.slice(1)\" v-bind:key=\"data[0]\" :class=\"{'table-secondary':(data[0] == 'N/A')}\">\n                        <td>{{data[0]}}</td>\n                        <td>{{data[1]}}</td>\n                    </tr>\n                </tbody>\n            </table>\n        </div>\n    </div>\n  </div>\n</div>\n\n</div>\n\n</section>\n\n</template>\n\n<script>\nimport axios from 'axios'\nimport { GChart } from 'vue-google-charts'\nimport { HollowDotsSpinner } from 'epic-spinners'\nimport { saveAs } from 'file-saver';\n\nexport default {\n  name: \"results\",\n  components: {\n    GChart,\n    HollowDotsSpinner\n  },\n  props: ['search_type', 'sequence_type', 'accession_num', 'specimen', 'gene_symbols', 'proteins', 'hosts', 'countries', 'years'],\n  data () {\n    return {\n        mview_consensus: false,\n        mview_reference: -1,\n        selectedRows: [],\n        viruses: null,\n        genesTable: null,\n        chartData: [['Country', 'Popularity']],\n        chartTableData: false,\n        chartOptions: {\n          height: 600,\n          datalessRegionColor: \"#fcfcfc\",\n          colorAxis: {colors: ['lightblue', 'green']}\n        },\n        yearData: false,\n        isLoadingResult: true,\n        country_codes: {null: 'Unknown', 'Unknown': 'Unknown', 'Afghanistan': 'AF', 'Albania': 'AL', 'Algeria': 'DZ', 'Angola': 'AO', 'Argentina': 'AR', 'Australia': 'AU', \n          'Austria': 'AT', 'Azerbaijan': 'AZ', 'Bahrain': 'BH', 'Bangladesh': 'BD', 'Belarus': 'BY', 'Belgium': 'BE', 'Belize': 'BZ', \n          'Benin': 'BJ', 'Bolivia': 'BO', 'Bosnia_and_Herzegovina': 'BA', 'Botswana': 'BW', 'Brazil': 'BR', 'Brunei': 'BN', 'Bulgaria': 'BG',\n          'Burkina_Faso': 'BF', 'Cambodia': 'CO', 'Cameroon': 'CM', 'Canada': 'CA', 'Central_African_Republic': 'CF', 'Chile': 'CL',\n          'China': 'CN', 'Colombia': 'CO', 'Cote_dIvoire': 'CI', 'Croatia': 'HR', 'Cyprus': 'CY', 'Czech_Republic': 'CZ',\n          'Democratic_Republic_of_the_Congo': 'CD', 'Denmark': 'DK', 'Dominican_Republic': 'DO', 'Ecuador': 'EC', 'Egypt': 'EG', 'Equatorial_Guinea': 'GQ',\n          'Estonia': 'EE', 'Ethiopia': 'ET', 'Finland': 'FI', 'France': 'FR', 'Gabon': 'GA', 'Gambia': 'GM', 'Germany': 'DE', 'Ghana': 'GH',\n          'Gibraltar': 'GI', 'Greece': 'GR', 'Guam': 'GU', 'Guyana': 'GY', 'Honduras': 'HN', 'Hong_Kong': 'HK', 'Hungary': 'HU', 'India': 'IN',\n          'Indonesia': 'ID', 'Iran': 'IR', 'Iraq': 'IQ', 'Ireland': 'IE', 'Israel': 'IL', 'Italy': 'IT', 'Japan': 'JP', 'Kazakhstan': 'KZ', 'Kenya': 'KE',\n          'Korea': 'KP', 'Kyrgyzstan': 'KZ', 'Laos': 'LA', 'Latvia': 'LV', 'Lebanon': 'LB', 'Lesotho': 'LS', 'Liberia': 'LR', 'Libya': 'LY', 'Lithuania': 'LT',\n          'Luxembourg': 'LU', 'Macedonia': 'MK', 'Malawi': 'MW', 'Malaysia': 'MY', 'Mali': 'ML', 'Mauritania': 'MR', 'Mayotte': 'YT', 'Mexico': 'MX',\n          'Moldova': 'MD', 'Mongolia': 'MN', 'Morocco': 'MA', 'Mozambique': 'MZ', 'Myanmar': 'MM', 'Namibia': 'NA', 'Nepal': 'NP', 'Netherlands': 'NL',\n          'New_Zealand': 'NZ', 'Niger': 'NE', 'Nigeria': 'NG', 'Norway': 'NO', 'Oman': 'OM', 'Pakistan': 'PK', 'Palau': 'PW', 'Panama': 'PA',\n          'Papua_New_Guinea': 'PG', 'Peru': 'PE', 'Philippines': 'PH', 'Poland': 'PL', 'Portugal': 'PT', 'Qatar': 'QA', 'Republic_of_the_Congo': 'CD',\n          'Romania': 'RO', 'Russia': 'RU', 'Rwanda': 'RW', 'Senegal': 'SN', 'Serbia': 'RS', 'Serbia_and_Montenegro': 'ME', 'Seychelles': 'SC',\n          'Sierra_Leone': 'SL', 'Singapore': 'SG', 'Slovenia': 'SI', 'Somalia': 'SO', 'South_Africa': 'ZA', 'South_Korea': 'KR', 'Spain': 'ES',\n          'Sri_Lanka': 'LK', 'Sudan': 'SD', 'Swaziland (Eswatani)': 'SZ', 'Sweden': 'SE', 'Switzerland': 'CH', 'Syria': 'SY', 'Taiwan': 'TW', 'Thailand': 'TH',\n          'Togo': 'TG', 'Tunisia': 'TN', 'Turkey': 'TR', 'Uganda': 'UG', 'Ukraine': 'UA', 'United_Arab_Emirates': 'AE', 'United_Kingdom': 'GB', 'Uruguay': 'UY',\n          'USA': 'US', 'Uzbekistan': 'UZ', 'Viet_Nam': 'VN', 'West_Bank': 'PS', 'Zambia': 'ZM', 'Zimbabwe': 'ZW'},\n    }\n  },\n  created () {\n    this.fetchData();\n  },\n  updated: function () {\n    $.fn.dataTable.ext.errMode = 'none';\n\n    var genesTable = $('#myTable').DataTable({\n      columnDefs: [ {\n        orderable: false,\n        className: 'select-checkbox',\n        targets: 0\n      },\n      {\n        targets: [ 1, 10 ],\n        visible: false,\n        searchable: false\n      }\n      ],\n      select: {\n          style:    'multi',\n          selector: 'td:first-child'\n      },\n      order: [[ 2, \"asc\" ]],\n      responsive: true\n    });\n\n    this.genesTable = genesTable;\n\n    $('#seqTable').DataTable({\n      order: [[ 1, \"desc\" ]],\n      \"dom\": '<\"toolbar\">',\n      \"paging\": false,\n    });\n\n    $('#yearTable').DataTable({\n      order: [[ 1, \"desc\" ]],\n      \"dom\": '<\"toolbar\">',\n      \"paging\": false,\n    });\n\n\n    $(\"#selectAllGenes\").click( function(e) {\n        if ($(this).is( \":checked\" )) {\n            genesTable.rows().select();\n        } else {\n            genesTable.rows().deselect(); \n        }\n    });\n\n\n    $('#hist-tab').on('click', e=> {\n      setTimeout(()=>{\n        this.$refs.gchartHist.drawChart();\n      }, 500);\n    })\n\n    $('#map-tab').on('click', e=> {\n      setTimeout(()=>{\n        this.$refs.gchartMap.drawChart();\n      }, 500);\n    })\n  },\n  watch: {\n\n  },\n  methods: {\n    fetchData(){\n        switch(this.search_type)\n        {\n        case \"accession\":\n            this.getVirusesByAccession(this.accession_num)\n            break;\n        case \"custom\":\n            this.getVirusesCustom()\n            break;\n        }\n    },\n    msaMuscleLink(algo) {\n      var ids = [];\n      var selected = this.genesTable.rows('.selected').data();\n\n      if(selected.length < 2) {\n        alert(\"Please select at least 2 sequence from the table.\")\n        return false;\n      } else if (selected.length > 10) {\n        alert(\"You can select a maximum of 10 sequences for the alignment.\")\n        return false;\n      }\n\n      for (var i = 0; i < selected.length; i++) {\n        ids.push(parseInt(selected[i][1]));\n      }\n\n      if(algo == \"mview\") {\n        var refid = parseInt($(\"input:radio[name=referenceForMview]:checked\").val());\n        if(refid) {\n          var index = ids.indexOf(refid);\n          if (index !== -1) ids.splice(index, 1);\n          ids.unshift(refid);\n        }\n      }\n\n      var link;\n      if(algo == \"mview\" && this.mview_consensus) {\n        link = this.$router.resolve({ path: 'msa', query: {algo: algo, ids: ids, consensus: this.mview_consensus } });\n      } else {\n        link = this.$router.resolve({ path: 'msa', query: {algo: algo, ids: ids } });\n      }\n      window.open(link.href, '_blank');\n    },\n    configureMview(){\n      var rows = [];\n      var ids = [];\n      var selected = this.genesTable.rows('.selected').data();\n\n      if(selected.length < 2) {\n        alert(\"Please select at least 2 sequence from the table.\")\n        return false;\n      } else if (selected.length > 10) {\n        alert(\"You can select a maximum of 10 sequences for the alignment.\")\n        return false;\n      }\n\n      for (var i = 0; i < selected.length; i++) {\n        rows.push({id: parseInt(selected[i][1]), \n          title: selected[i][4]});\n      }\n\n      this.selectedRows = rows;\n\n      $('#modalConfig').modal('toggle')\n    },\n    downloadSelected() {\n      var fasta = [];\n      var selected = this.genesTable.rows('.selected').data();\n\n      if(selected.length == 0) {\n        alert(\"Please select at least 1 sequence from the table.\")\n        return;\n      }\n\n      for (var i = 0; i < selected.length; i++) {\n        fasta.push(selected[i][10].replace(\"&gt;\", \">\"));\n      }\n\n      var blob = new Blob([fasta.join(\"\\n\")], {type: \"text/plain;charset=utf-8\"});\n      saveAs(blob, \"hCovdb_records.fasta\");\n    },\n    getVirusesByAccession(accessionNum) {\n        axios.get(\"/api/viruses/search/by_accession/\" + accessionNum).then(response=>{\n            this.viruses = response.data;\n            this.isLoadingResult = false;\n            this.buildGeoMap();\n        })\n    },\n    getVirusesCustom() {\n      axios.post(\"/api/viruses/search/by_criteria/\" + this.sequence_type + \"/\" + this.specimen, {\n        gene_symbol: this.gene_symbols,\n        protein: this.proteins,\n        host: this.hosts,\n        country: this.countries,\n        collection_date: this.years,\n      }).then(response=>{  \n        this.viruses = response.data;\n        this.isLoadingResult = false;\n        this.buildGeoMap();\n      })\n    },\n    buildGeoMap() {\n        var results = [['Country', 'Sequences']];\n        var yearHist = [['Collection Date', 'Sequences']];\n        var counts = {};\n        var yearCounts = {};\n        var tableCounts = {};\n\n        for(var v of this.viruses) {\n          var country_code = this.country_codes[v.country];\n          var country_name = v.country == null ? \"Unknown\" : v.country;\n          var year = v.collection_date;\n          year = year == null ? \"Unknown\" : year;\n\n          if(country_code in counts) {\n            counts[country_code]++;\n            tableCounts[country_name]++;\n          }\n          else\n          {\n            counts[country_code] = 1;\n            tableCounts[country_name] = 1;\n          }\n\n          // Year data\n          if(year in yearCounts) {\n            yearCounts[year]++;\n          } else {\n            yearCounts[year] = 1;\n          }\n        }\n\n        for(var k in counts) {\n          results.push([k, counts[k]])\n        }\n        \n        for(var k in yearCounts) {\n          yearHist.push([k, yearCounts[k]])\n        }\n\n        this.chartData = results;\n        this.chartTableData = tableCounts;\n        this.yearData = yearHist;\n    },\n    getMapCounts(gene_symbols = null, proteins = null, hosts = null, countries = null, years = null) {\n      axios.post(\"/api/map/by_criteria/\" + this.specimen, {\n        gene_symbol: this.gene_symbols,\n        protein: this.proteins,\n        host: this.hosts,\n        country: this.countries,\n        collection_date: this.years,\n      }).then(response=>{  \n          var results = [['Country', 'Sequences']];\n          results = results.concat(response.data);\n          this.chartData = results;\n      })\n    }\n  }\n};\n</script>\n\n<style>\n.crit {\n    font-size: 75%;\n}\n</style>\n\n"]}]}